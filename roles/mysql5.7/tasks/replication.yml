---
- name: Ensure replication user exists on master.
  mysql_user:
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_root_password }}"
    name: "{{ item.name }}"
    host: "{{ item.host | default('%') }}"
    password: "{{ item.password }}"
    priv: "{{ item.priv | default('*.*:REPLICATION SLAVE,REPLICATION CLIENT') }}"
    state: present
  with_items: mysql_replication_user 
  when:
    - mysql_replication_role == 'master'

- name: Check slave replication status.
  mysql_replication:
    mode: getslave
    login_user: "{{ mysql_replication_user.name }}"
    login_password: "{{ mysql_replication_user.password }}"
  ignore_errors: true
  register: slave
  when:
    - mysql_replication_role == 'slave'

- name: Get the current master servers replication status 
  mysql_replication: 
    mode: getmaster 
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_new_root_password }}"
    delegate_to: "{{  mysql_replication_master }}"
  register: repl_stat 
  when: slave | failed and mysql_replication_role == 'slave' and  mysql_replication_master is defined

- name: Change the master in slave to start the replication 
  mysql_replication: 
    mode: changemaster
    login_user: "{{ mysql_root_username }}" 
    login_password: "{{ mysql_new_root_password }}"
    master_host: "{{ mysql_replication_master }}"
    master_log_file: "{{ repl_stat.File }}" 
    master_log_pos: "{{ repl_stat.Position }}"
    master_user: "{{ mysql_replication_user.name }}"
    master_password: "{{ mysql_replication_user.pass }}" 
  when: slave | failed and mysql_replication_role == 'slave' and mysql_replication_master is defined 

- name: start slave in slave to start the replication 
  mysql_replication: 
    mode: startslave 
    login_user: "{{ mysql_root_username }}"
    login_password: "{{ mysql_new_root_password }}"
  when: slave | failed and mysql_repl_role == 'slave' and mysql_repl_master is defined